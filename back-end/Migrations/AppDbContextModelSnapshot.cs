// <auto-generated />
using System;
using Ecomerce.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Ecomerce.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.8");

            modelBuilder.Entity("DeliveryProperties", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("DeliveryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DeliveryStatus")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("PreviewDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("SaleProductId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SaleProductId");

                    b.ToTable("DeliveryProperties");
                });

            modelBuilder.Entity("Ecomerce.Models.ProductModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.Property<int>("Quantify")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("SaleProductId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ShoppingCarId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SaleProductId");

                    b.HasIndex("ShoppingCarId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Ecomerce.Models.ShoppingCar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantify")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ShoppingCarId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Total")
                        .HasColumnType("REAL");

                    b.Property<string>("UserCustomerId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserCustomerId");

                    b.HasIndex("UserId");

                    b.ToTable("ShoppingCar");
                });

            modelBuilder.Entity("Ecomerce.Models.UserModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SaleProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("UserSellerId")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("UserSellerId1")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserSellerId1");

                    b.ToTable("SaleProduct");
                });

            modelBuilder.Entity("UserCustomer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UserCustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("UserModelId")
                        .HasColumnType("TEXT");

                    b.Property<int>("shoppingCarId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserModelId");

                    b.ToTable("UserCustomer");
                });

            modelBuilder.Entity("UserSeller", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalSales")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("UserModelId")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserSellerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserModelId");

                    b.ToTable("UserSeller");
                });

            modelBuilder.Entity("DeliveryProperties", b =>
                {
                    b.HasOne("SaleProduct", null)
                        .WithMany("Deliveries")
                        .HasForeignKey("SaleProductId");
                });

            modelBuilder.Entity("Ecomerce.Models.ProductModel", b =>
                {
                    b.HasOne("SaleProduct", null)
                        .WithMany("Products")
                        .HasForeignKey("SaleProductId");

                    b.HasOne("Ecomerce.Models.ShoppingCar", null)
                        .WithMany("Products")
                        .HasForeignKey("ShoppingCarId");
                });

            modelBuilder.Entity("Ecomerce.Models.ShoppingCar", b =>
                {
                    b.HasOne("UserCustomer", null)
                        .WithMany("ShoppingCar")
                        .HasForeignKey("UserCustomerId");

                    b.HasOne("Ecomerce.Models.UserModel", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SaleProduct", b =>
                {
                    b.HasOne("UserSeller", null)
                        .WithMany("Sales")
                        .HasForeignKey("UserSellerId1");
                });

            modelBuilder.Entity("UserCustomer", b =>
                {
                    b.HasOne("Ecomerce.Models.UserModel", null)
                        .WithMany("Customer")
                        .HasForeignKey("UserModelId");
                });

            modelBuilder.Entity("UserSeller", b =>
                {
                    b.HasOne("Ecomerce.Models.UserModel", null)
                        .WithMany("Seller")
                        .HasForeignKey("UserModelId");
                });

            modelBuilder.Entity("Ecomerce.Models.ShoppingCar", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Ecomerce.Models.UserModel", b =>
                {
                    b.Navigation("Customer");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("SaleProduct", b =>
                {
                    b.Navigation("Deliveries");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("UserCustomer", b =>
                {
                    b.Navigation("ShoppingCar");
                });

            modelBuilder.Entity("UserSeller", b =>
                {
                    b.Navigation("Sales");
                });
#pragma warning restore 612, 618
        }
    }
}
